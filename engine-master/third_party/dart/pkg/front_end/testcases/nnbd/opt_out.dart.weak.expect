library;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd/opt_out.dart: Warning: Assigning value of type 'Null?' to a variable of type 'int'.
//
import self as self;
import "dart:core" as core;

import "org-dartlang-testcase:///opt_out_lib.dart";

typedef F = () →? void;
class A<T extends core::Object? = dynamic> extends core::Object {
  late field core::int field = 42;
  synthetic constructor •() → self::A<self::A::T%>
    : super core::Object::•()
    ;
}
class B extends self::A<core::String?> {
  synthetic constructor •() → self::B
    : super self::A::•()
    ;
}
static field core::List<core::String?> l = <core::String?>[];
static field core::String? s = null;
static field core::String t = self::s!;
late static field core::int field = 42;
static method method(() →? void f, {required core::int a = #C1}) → void {}
static method main() → dynamic {}
static method noErrors() → dynamic {
  late core::int local = 42;
  core::String? s = null;
  dynamic c;
  let final dynamic #t1 = c in #t1.{core::Object::==}(null) ?{dynamic} null : let final void #t2 = #t1.f in #t1;
  let final dynamic #t3 = c in #t3.{core::Object::==}(null) ?{dynamic} null : #t3.[](0);
}

library;
//
// Problems in library:
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:11:3: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   late int field = 42;
//   ^^^^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:13:25: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// class B extends A<String?> {}
//                         ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:15:28: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// typedef F = void Function()?;
//                            ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:17:12: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// List<String?> l = [];
//            ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:18:7: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// String? s = null;
//       ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:21:1: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// late int field = 42;
// ^^^^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:23:21: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// void method(void f()?, {required int a}) {}
//                     ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:23:25: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// void method(void f()?, {required int a}) {}
//                         ^^^^^^^^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:19:10: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
// var t = s!;
//          ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:26:3: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   late int local = 42;
//   ^^^^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:27:14: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   List<String?> l = null;
//              ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:28:9: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   String? s = null;
//         ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:29:12: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   var t = s!;
//            ^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:31:4: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   c?..f;
//    ^^^
//
// pkg/front_end/testcases/nnbd/opt_out_lib.dart:32:4: Error: This requires the 'non-nullable' experiment to be enabled.
// Try enabling this experiment by adding it to the command line when compiling and running.
//   c?.[0];
//    ^^^
//
import self as self2;
import "dart:core" as core;

typedef F = () →? void;
class A<T extends core::Object* = dynamic> extends core::Object {
  late field core::int* field = 42;
  synthetic constructor •() → self2::A<self2::A::T*>*
    : super core::Object::•()
    ;
}
class B extends self2::A<core::String?> {
  synthetic constructor •() → self2::B*
    : super self2::A::•()
    ;
}
static field core::List<core::String?>* l = <core::String?>[];
static field core::String? s = null;
static field core::String t = self2::s!;
late static field core::int* field = 42;
static method method(() →? void f, {required core::int* a = #C1}) → void {}
static method errors() → dynamic {
  late core::int* local = 42;
  core::List<core::String?>* l = null;
  core::String? s = null;
  core::String t = s!;
  dynamic c;
  let final dynamic #t4 = c in #t4.{core::Object::==}(null) ?{dynamic} null : let final void #t5 = #t4.f in #t4;
  let final dynamic #t6 = c in #t6.{core::Object::==}(null) ?{dynamic} null : #t6.[](0);
}

constants  {
  #C1 = null
}
